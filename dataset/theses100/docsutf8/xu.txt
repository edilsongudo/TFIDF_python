An Eclipse Environment for Z
Chengdong Xu

This thesis is submitted in partial fulfillment of the requirements for the Degree of Master of Science at the University of Waikato.

December 2006
© Chengdong Xu 2006

Abstract

This thesis reports on the design, implementation and evaluation of a new interactive Z environment that is integrated into the Eclipse environment. The Z language is a formal specification notation that is used to describe and model computer-based systems. For the widespread use of Z, it is desirable to

integrate Z support with a mature and popular editing environment, such as Eclipse. Eclipse was chosen as the basis for the new Z environment because it is

widely used, it provides rich functionality and it is designed to be extensible. The Z environment described in this thesis extends Eclipse to provide a large set of useful features for editing and analyzing Z specifications, such as a table of Z symbols, constant detection of syntax and type errors, outlining facilities, cross-referencing of Z names and conversion between different Z markups. feedback shows that the resulting Z environment is helpful for editing and correcting Z specifications. The development of the Z support for Eclipse is a part of the CZT (Community Z Tools) project, which is a Java framework for building Z tools and provides parsers, typecheckers and other Z tools. User

ii

Contents



OVERVIEW OF Z NOTATION ...............................................................................................1 OVERVIEW OF ECLIPSE ......................................................................................................4 WHY DEVELOP A CZT PLUG-IN FOR ECLIPSE? ................................................................. 11 STRUCTURE OF THE REST OF THE THESIS ........................................................................14 RELATED WORK...........................................................................................16

CHAPTER 2 2.1 2.2 2.3 2.4

CZT JEDIT PLUG-INS .......................................................................................................16 CADI ...........................................................................................................................20 JAVA DEVELOPMENT TOOLS (JDT) PLUG-IN ....................................................................21 TEXLIPSE PLUG-IN FOR ECLIPSE .....................................................................................27 OVERVIEW OF THE CZT ECLIPSE EDITOR PLUG-IN ........................31

CHAPTER 3 3.1 3.2

FEATURES ........................................................................................................................31 IMPLEMENTATION TECHNIQUES .......................................................................................35 THE Z CHARACTER MAP VIEW ...............................................................39

CHAPTER 4 4.1 4.2 4.3 4.4 4.5

CATEGORIZED CHARACTERS AND HOVER SUPPORT ........................................................39 ACTIONS..........................................................................................................................40 IMPLEMENTATION TECHNIQUES .......................................................................................41 DESIGN ISSUES AND ALTERNATIVES ................................................................................43 FUTURE IMPLEMENTATION ..............................................................................................43 THE CZT EDITOR .........................................................................................45

CHAPTER 5 5.1 5.2 5.3 5.3.1 5.3.2 5.3.3 5.3.4 5.3.5 5.3.6 5.3.7 5.3.8 5.3.9 5.3.10

DESIGN ISSUES AND ALTERNATIVES FOR THE EDITOR .....................................................45 IMPLEMENTATION TECHNIQUES FOR THE EDITOR CREATION ...........................................45 FEATURES ........................................................................................................................48 Syntax Coloring..........................................................................................................49 Highlighting of Current Partition...............................................................................51 Folding of Partitions ..................................................................................................53 Bracket Matching .......................................................................................................55 Selection by Double-Clicking .....................................................................................58 Marking References of A Z Name ...............................................................................60 Jumping To the Declaration of Variables ...................................................................63 Highlighting the Enclosing Element...........................................................................65 Problem Markers........................................................................................................69 Hover Support ........................................................................................................71
iii

5.3.11 5.4

Viewing Specifications in Alternative Formats ......................................................74

FUTURE IMPLEMENTATION ..............................................................................................76 WIZARDS ........................................................................................................77

CHAPTER 6 6.1 6.2 6.3

NEW CZT PROJECT CREATION WIZARD ..........................................................................77 NEW Z SPECIFICATION CREATION WIZARD .....................................................................78 IMPLEMENTATION TECHNIQUES .......................................................................................80 THE OUTLINE VIEW....................................................................................82

CHAPTER 7 7.1 7.2

DESIGN ISSUES AND ALTERNATIVES ................................................................................83 IMPLEMENTATION TECHNIQUES .......................................................................................84 THE PROBLEMS VIEW................................................................................86

CHAPTER 8 8.1

IMPLEMENTATION TECHNIQUES .......................................................................................87 THE Z CONVERSION VIEW .......................................................................88

CHAPTER 9 9.1 9.2 9.3

IMPLEMENTATION TECHNIQUES .......................................................................................89 DESIGN ISSUES AND ALTERNATIVES ................................................................................89 FUTURE IMPLEMENTATION ..............................................................................................90 THE CZT PERSPECTIVE .............................................................................91

CHAPTER 10 10.1 10.2

IMPLEMENTATION TECHNIQUES .......................................................................................92 DESIGN ISSUES AND ALTERNATIVES ................................................................................93 EVALUATION 1 ­ DESIGN AND FEATURES............................................94 SCHEMA BOX.................................................................................................99

CHAPTER 11 CHAPTER 12 12.1 12.2

DESIGN ISSUES AND ALTERNATIVES ..............................................................................100 IMPLEMENTATION TECHNIQUES .....................................................................................100 EVALUATION 2 ­ USABILITY ..................................................................103 PREFERENCE SETTINGS..........................................................................109 CONCLUSION .............................................................................................. 114

CHAPTER 13 CHAPTER 14 CHAPTER 15

REFERENCES............................................................................................................................ 116 APPENDIX A. INSTRUCTIONS FOR THE USABILITY EXPERIMENT.................. 119

SECTION A - INSTALLATION AND PROJECT CREATION ................................................................ 119 SECTION B ­ PREPARATION ........................................................................................................ 119 SECTION C ­ LATEX MARKUP ...................................................................................................120 SECTION D - UNICODE MARKUP ................................................................................................121 APPENDIX B. CZT ECLIPSE USABILITY EVALUATION QUESTIONS .................123

PART I ­ GENERAL QUESTIONS (REGARDING THE PARTICIPANT'S BACKGROUND) .......................123 PART II ­ EDITING LATEX MARKUP SPECIFICATIONS.................................................................124 PART III ­ EDITING UNICODE MARKUP SPECIFICATIONS ............................................................125 PART IV ­ COMPARISON .............................................................................................................125

iv

PART V - SUGGESTION................................................................................................................126 APPENDIX C. REFERENCE FOR THE CZT ECLIPSE INTERFACE .......................127

INSTALLATION............................................................................................................................127 Installation of Eclipse SDK: .................................................................................................127 Installation of CZT plug-ins:.................................................................................................127 Installation of CZT Font (optional): .....................................................................................127 Running Eclipse:...................................................................................................................128 CREATING Z SPECIFICATIONS .....................................................................................................128 CZT project creation wizard: ................................................................................................128 Z specification creation wizard:............................................................................................128 BROWSING AND EDITING Z SPECIFICATIONS ..............................................................................128 Content outline: ....................................................................................................................129 Z Character Map panel: .......................................................................................................129 Z partitions: ..........................................................................................................................129 Hiding/showing paragraphs: ................................................................................................130 Syntax highlighting:..............................................................................................................130 Variable references: ..............................................................................................................130 Brackets matching: ...............................................................................................................130 Selection by double click: .....................................................................................................130 Term highlight:......................................................................................................................130 Problems report: ...................................................................................................................130 Editor hover support:............................................................................................................131 Z Conversion View:...............................................................................................................131 APPENDIX D. USER DOCUMENTATION .....................................................................132



v

List of Figures
Figure 1.1 ­ The Eclipse Workbench Window...................................................................7 Figure 1.2 ­ Eclipse Generic Text Editor ...........................................................................9 Figure 1.3 ­ Visual Presentation of Contents ...................................................................10 Figure 2.1 ­ Editing Mode Indicator................................................................................17 Figure 2.2 ­ Z Character Map ..........................................................................................17 Figure 2.3 ­ Error List Panel............................................................................................18 Figure 2.4 ­ Z Sidekick Panel ..........................................................................................18 Figure 2.5 ­ Typeset Panel ...............................................................................................20 Figure 2.6 ­ New Java Project Wizard .............................................................................23 Figure 2.7 ­ Syntax Coloring ...........................................................................................24 Figure 2.8 ­ Content Assistant .........................................................................................25 Figure 2.9 ­ Document Outline........................................................................................28 Figure 2.10 ­ LaTeX Table View .....................................................................................29 Figure 2.11 ­ New LaTeX Project Creation Wizard.........................................................29 Figure 3.1 ­ Some features of the CZT plug-in................................................................34 Figure 3.2 ­ The First Page of New Plug-in Project Wizard............................................35 Figure 3.3 ­ The Second Page of new Plug-in Project Wizard ........................................36 Figure 3.4 ­ The Plug-in Manifest Editor ........................................................................38 Figure 4.1 ­ Z Character Map View.................................................................................39 Figure 4.2 ­ Hover in Z Character Map View..................................................................40 Figure 5.1 ­ New Extension Page ....................................................................................46 Figure 5.2 ­ Syntax Coloring Support..............................................................................49 Figure 5.3 ­ Highlighting of Partitions ............................................................................52 Figure 5.4 ­ Single-Character Bracket Matching.............................................................56 Figure 5.5 ­ Multiple-Character Bracket Matching .........................................................57 Figure 5.6 ­ Double-Click in the Editor...........................................................................59 Figure 5.7 ­ Marking Occurrences of a Z Name..............................................................60 Figure 5.8 ­ Clicking Inside a Name................................................................................64 Figure 5.9 ­ Go to Declaration.........................................................................................64 Figure 5.10 ­ Term Highlight...........................................................................................66 Figure 5.11 ­ Problem Markers........................................................................................70 Figure 5.12 ­ Hover on Problems ....................................................................................72 Figure 5.13 ­ Hover on a Z Name....................................................................................73 Figure 6.1 ­ New CZT Project Creation Wizard..............................................................78 Figure 6.2 ­ New Z Specification Creation Wizard .........................................................79 Figure 7.1 ­ Outline View ................................................................................................82 Figure 8.1 Problems View................................................................................................86 Figure 9.1 ­ Z Conversion View ......................................................................................88 Figure 12.1 ­ The First Box Rendering Style...................................................................99 Figure 12.2 ­ The Second Box Rendering Style ............................................................100 Figure 14.1 ­ Compiler Preference Page........................................................................109
vi

Figure 14.2 ­ Editor Preference Page.............................................................................110 Figure 14.3 ­ Annotation Preference Page.....................................................................111 Figure 14.4 ­ Folding Preference Page ..........................................................................112 Figure 14.5 ­ Syntax Coloring Preference Page ............................................................112

List of Tables
Table 13.1 ­ Statistics of the Evaluation Result .............................................................104

Abbreviations
CZT ­ Community Z Tools IDE ­ Integrated Development Environment GUI ­ Graphic User Interface JDT ­ Java Development Tool PDE ­ Plug-in Development Environment SDK ­ Software Development Kit WYSIWYG ­ What You See Is What You Get

vii

Chapter 1 Introduction

1.1 Overview of Z Notation "The formal specification notation Z (pronounced "zed"), useful for describing computer-based systems, is based on Zermelo-Fränkel set theory and first order predicate logic. It has been developed by the Programming

Research Group (PRG) at the Oxford University Computing Laboratory (OUCL) and elsewhere since the late 1970s, inspired by Jean-Raymond Abrial's seminal work. Z is now defined by an ISO standard and is public domain" (Bowen, 2005). "The Z specification language was adopted as an ISO standard in 2002" (Malik & Utting, 2005). The Z notation is a mature, model-based notation. In Z a computer-based

system is modeled by representing its state and some operations that can change its state. Z is not another programming language. Z specifications

are not intended to be interpreted or compiled into a running program for execution. The Z notation is used to describe and model computer-based However, it is

systems and is formal enough to be understood by computers.

not intended to be executed by computers, because it is designed for human readers only. The Z notation is extremely powerful for its use in two rather Z can be used to

different ways: a descriptive style and an analytic style.

model some particular system such as a text editor or a radiation therapy machine, but it can also be used for the definition and extension of itself (Jacky, 1997, p.32).

1

To see how a Z specification differs from the code written in a programming language and be clear why a Z specification can not be expected to be executed by computers, here is a very simple example written in the C language.
/* Compute the integer square root */ int iroot (int a) { int i, term, sum; term = 1; sum = 1; for (i = 0; i <= a; i++) term = term + 2; sum = sum + term; } return i; }

(Jacky, 1997, p.34) As the comment in the first line shows, this tiny C function is supposed to compute the integer square root of an integer number. By calling iroot

with a set to an integer number, for example, 4, it should return 2 as its result. However, as you know, some numbers do not have integer square roots at all. But the function's name and comment do not explain the function's behavior for every input. They turn out to be not complete, and thus not be as helpful It is clear that a code written in a programming

as they are supposed to.

language can only describe its computation, but not the actual result of the computation (Jacky, 1997, p.34). Here is the Z specification describing the behavior of iroot.
2

(Jacky, 1997, p.35) As seen in the above snippet of Z specification, the iroot function is expressed in a single Z paragraph called an axiomatic definition. delimited by a sort of box as shown above. the paragraph into two parts. The text is

The big horizontal line divides

The text above the line is the declaration part

of the paragraph, which corresponds to the declaration of the C function:
int iroot (int a)

The

is the symbol for natural numbers.

The declaration part in the Z

paragraph tells that the input (the

to the left of the arrow) to the function to the right of the arrow) is

must be a natural number and the result (the also a natural number (Jacky, 1997, p.35).

The text below the big horizontal line is the predicate part of the paragraph. It explains that iroot returns the largest natural number that is at most the square root of the argument, a. The above example clearly shows the key difference between Z and an executable programming language. "The predicate part in a Z definition

describes what the function does without explaining how to do it; the body of a C function describes how to compute the function without explaining what the result will be" (Jacky, 1997, p.37). The example also shows that Z is not a programming language. A Z notation is typically represented in the form of a mixture of texts, Greek letters, boxes, and some invented Z-specific pictorial symbols, which can help users quickly grasp the structure of the model of a computer-based system. However, the input of those special symbols is also a big pain for Z notation
3

writers, so suggestions for rendering the Z notation symbols in ASCII and in LaTeX are also included in the ISO Z Standard (ISO/IEC 13568, 2002). One of the main benefits of formal specification languages like Z is that the specifications can be analyzed by tools to find errors and explore consequences. There are many Z tools available, but the most common

tools used by Z users are the Emacs editor and command line typecheckers. The Community Z Tools (CZT) project was started in 2002 to build sophisticated tools support for the new ISO Z Standard. "The CZT project is

building a set of tools for editing, typechecking and animating formal specifications written in the Z specification language, with some support for Z extensions such as Object-Z, Circus, and TCOZ. These tools are all built

using the CZT Java framework for Z tools" ("Welcome to CZT", 2006) 1.2 Overview of Eclipse Eclipse as an open source project was launched by a group set of companies ­ IBM and seven other companies in the fall of 2001. has taken the computing industry by storm. Since then, "Eclipse

The download data for the

Eclipse SDK (Software Development Kit) is astounding and a true ecosystem is forming around this new phenomenon" (Arthorne & Laffra, 2004, p.3). the last few years, the Eclipse organization has grown surprisingly fast. has been organized as a non-profit corporation known as the Eclipse Foundation from its original eight companies. it is hard to define what Eclipse is. Due to its increasing growth, It In

It can be thought as a platform for

different IDEs or a general-purpose application for some users without programming with specific languages. Of course, it can be a perfect Java It is also an open source

development environment for Java programmers. community.

To quote the Eclipse FAQ: "The official party line is, Eclipse is

an open (IDE) platform for anything, and for nothing in particular" (Arthorne & Laffra, 2004, p.3). That is, the Eclipse platform is a universal

4

IDE for all platforms without thinking of any particular tool support initially. The Eclipse SDK usually serves as the representation of Eclipse when being spoken of by its users. The SDK is comprised of several contributing

projects, which include the platform subproject, the Java Development Tools (JDT) subproject and the Plug-in Development Environment (PDE) subproject. The minimal units that make up Eclipse are the components All components in the Eclipse platform are

known as the Eclipse plug-ins.

plug-ins including the famous JDT, which is also an independent project and no "backdoor" is open to its development, even though it comes with Eclipse. Unlike other tools, Eclipse provides tools builder with a new way of thinking. Tools builders should always think of Eclipse as their student and they "teach" it what to do for their problems by writing the so-called plug-ins. From the users' point of view, they would prefer a universal tool with support for as many capabilities as possible so that they do not have to switch to different tools for different behaviors and programming languages. exactly what Eclipse does. That is

After teaching Eclipse what it should do and

re-starting Eclipse, users see new functionalities in Eclipse, rather than a new tool and they can not tell where one of the tools assembled into Eclipse starts or where another tool ends. The only limitation of Eclipse is obviously the It is the developers who create the value of

plug-in developers' imagination.

Eclipse as they can decide how to extend Eclipse and how Eclipse performs. However, to get new functionalities that integrate well with Eclipse and plug-ins that others contribute, the users should know how to "plug in" their specific functionalities into Eclipse based on the integration points, known as the Eclipse extension points. This section is going to give a brief overview of the Eclipse platform. As

talked above, the Eclipse platform is obviously a foundation platform on

5

which you can build different Integrated Development Environments (IDEs) for different purposes. However, it is also a foundation platform for By building tools

building arbitrary applications and purpose-centric tools.

or applications based on the Eclipse platform, you can get benefits from the Eclipse platform by integrating your tools or applications with other Eclipse-based tools or applications contributed by other developers or teams. Thus, Eclipse users can have a rich and consistent experience in using Eclipse for different purposes. Different people may have significantly different

reasons for using Eclipse, but most users, particularly developers, require good user interfaces which can facilitate the management of their digital resources, such as browsing or editing their projects. Thus the Eclipse

platform provides a managed window system in which there are a lot of useful user interface components. Figure 1.1 shows a screenshot of the main workbench window that Eclipse provides.

6

Figure 1.1 ­ The Eclipse Workbench Window

As seen in Figure 1.1, the Eclipse platform provides its users with a powerful window containing a comprehensive collection of standard generic user interface components such as editors and a set of views. The text editor in the top-right corner provides the ability to browse and/or edit the contents of text-based resources in projects. collections of file-based resources. Projects are typically

The resources navigator view positioned

on the top-left corner enables users to browse the resources in the system. The outline view on the bottom-left corner typically outlines the contents of the resource that the user selects and often reflects the user's selection. The

Eclipse platform also provides a rich set of other useful views/panels which can facilitate the use of Eclipse and other contributed plug-ins. most useful views are: The Problems View: Plug-ins can inform users of the problems (errors, warnings, useful information, etc.) related to a specific resource.
7

Some of the

The Tasks View: This is shown at the bottom of the above picture.

It allows

users to create their future tasks so that later they can see what they intended to do. They can easily jump to the correct position of the related resource by

clicking on a particular entry in the view. The Error Log View: This usually informs the Eclipse users of the errors Eclipse produced during its runs. The plug-in developers can also contribute

to the Eclipse platform by adding error entries to inform their plug-in users of the problems that occur when they are using the plug-ins. The Console View: This allows plug-ins to output some useful information that is not suitable to put into other views or output some particular information like compilation progress messages. As well as the editors and views, the Eclipse platform also provides menu bars, tool bars, a status bar and pop-up context menus that provide commands that act on specific resources. The above functionalities are just some of the commonly used generic functionalities which are built into the Eclipse platform, although there are lots of other functionalities that the Eclipse platform provides. The Eclipse

platform provides plug-in developers the ability of extending the platform by adding new content types, adding new functionality or modifying existing functionality on new or existing content types. As the editor framework is the most important part provided for most Eclipse users, especially the application developers, the following gives an overview of some impor